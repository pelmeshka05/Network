{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","editMode","setEditMode","useState","status","setStatus","useEffect","React","createElement","onDoubleClick","activateEditMode","onChange","e","currentTarget","value","autoFocus","onBlur","deactivateEditMode","updateStatus","ProfileDataFormReduxForm","reduxForm","form","_ref","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","_ref2","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","_ref3","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","target","files","length","ProfileDataForm","initialValues","formData","then","Post","item","alt","message","likesCount","required","MyPostsMemorized","memo","postsElements","posts","reverse","p","id","postsBlock","AddPostForm","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","MyPosts","Profile","ProfileContainer","Component","refreshProfile","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","componentDidMount","componentDidUpdate","prevProps","prevState","componentWillUnmount","render","assign","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.2ee0f935.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"mainPhoto\":\"ProfileInfo_mainPhoto__1Fgjo\",\"contact\":\"ProfileInfo_contact__1N3gp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, {useState, useEffect, ChangeEvent} from 'react';\n\ntype PropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    }, [props.status]);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false);\n        props.updateStatus(status);\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value);\n    }\n\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <b>Status: </b> <span onDoubleClick={activateEditMode}>{props.status || \"-------\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode}\n                       value={status}/>\n            </div>\n            }\n        </div>\n    )\n}\n\n\nexport default ProfileStatusWithHooks;\n","import React from \"react\";\nimport s from './ProfileInfo.module.css';\nimport {createField, GetStringKeys, Input, Textarea} from \"../../common/FormsControls/FormsControls\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\nimport {ProfileType} from '../../../types/types';\n\ntype PropsType = {\n    profile: ProfileType\n}\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\n\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => {\n    return <form onSubmit={handleSubmit}>\n        <div><button>save</button></div>\n        {error && <div className={style.formSummaryError}>\n            {error}\n        </div>\n        }\n        <div>\n            <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\n        </div>\n        <div>\n            <b>Looking for a job</b>: { createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"} )}\n        </div>\n\n        <div>\n            <b>My professional skills</b>:\n            { createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea  )}\n        </div>\n\n\n        <div>\n            <b>About me</b>:\n            { createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea  )}\n        </div>\n        <div>\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\n            return <div key={key} className={s.contact}>\n                {/* todo: create some solution for embedded objects */}\n            <b>{key}: {createField(key, \"contacts.\" + key, [], Input)}</b>\n            </div>\n        })}\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;\n","import React, {ChangeEvent, useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from \"../../../assets/images/user.png\";\nimport ProfileDataForm from \"./ProfileDataForm\";\nimport {ContactsType, ProfileType} from '../../../types/types';\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        // todo: remove then\n        saveProfile(formData).then(\n            () => {\n                setEditMode(false);\n            }\n        );\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto}/>\n                {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}\n\n                { editMode\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => {setEditMode(true)} } profile={profile} isOwner={isOwner}/> }\n\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n            </div>\n        </div>\n    )\n}\n\ntype ProfileDataPropsType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\n    return <div>\n        {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\n        <div>\n            <b>Full name</b>: {profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\n        </div>\n        {profile.lookingForAJob &&\n        <div>\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\n        </div>\n        }\n\n        <div>\n            <b>About me</b>: {profile.aboutMe}\n        </div>\n        <div>\n            <b>Contacts</b>: {\n            Object\n                .keys(profile.contacts)\n                .map((key)  => {\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\n        })}\n        </div>\n    </div>\n}\n\n\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}</b>: {contactValue}</div>\n}\n\nexport default ProfileInfo;\n","import React from 'react';\nimport s from './Post.module.css';\n\ntype PropsType = {\n    message: string\n    likesCount: number\n}\n\nconst Post: React.FC<PropsType> = (props) => {\n  return (\n    <div className={s.item}>\n      <img src='https://cdn-icons-png.flaticon.com/256/5077/5077628.png' alt=\"\" />\n        { props.message }\n          <div>\n        <span>like</span> { props.likesCount }\n      </div>\n    </div>\n  )\n}\n\nexport default Post;\n","import React from 'react';\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, GetStringKeys, Input} from '../../../common/FormsControls/FormsControls';\nimport {required} from '../../../../utils/validators/validators';\n\ntype PropsType = {\n\n}\n\nexport type AddPostFormValuesType = {\n    newPostText: string\n}\n\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\n\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType> = (props) => {\n    return (\n            <form onSubmit={props.handleSubmit}>\n                <div>\n                    { createField<AddPostFormValuesTypeKeys>(\"Your post\", 'newPostText', [required], Input) }\n                </div>\n                <div>\n                    <button>Add post</button>\n                </div>\n            </form>\n    )\n}\n\nexport default reduxForm<AddPostFormValuesType, PropsType>({form: 'profile-add-post'})(AddPostForm)\n","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\nimport AddPostForm, {AddPostFormValuesType} from './AddPostForm/AddPostForm';\nimport {PostType} from '../../../types/types';\n\n\nexport type MapPropsType = {\n    posts: Array<PostType>\n}\nexport type DispatchPropsType = {\n    addPost: (newPostText: string) => void\n}\n\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\n    let postsElements =\n        [...props.posts]\n            .reverse()\n            .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\n\n    let onAddPost = (values: AddPostFormValuesType) => {\n        props.addPost(values.newPostText);\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddPostForm onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    )\n}\n\nconst MyPostsMemorized = React.memo(MyPosts);\n\nexport default MyPostsMemorized;\n","import {actions} from \"../../../redux/profile-reducer\";\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from '../../../redux/redux-store';\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        posts: state.profilePage.posts\n    }\n}\n\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\n    addPost: actions.addPostActionCreator\n})(MyPosts);\n\nexport default MyPostsContainer;\n","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport {ProfileType} from '../../types/types';\n\ntype PropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile:React.FC<PropsType> = (props) => {\n    return (\n        <div>\n            <ProfileInfo savePhoto={props.savePhoto}\n                         isOwner={props.isOwner}\n                         profile={props.profile}\n                         status={props.status}\n                         saveProfile={props.saveProfile}\n                         updateStatus={props.updateStatus}/>\n            <MyPostsContainer />\n        </div>\n    )\n}\n\nexport default Profile;\n","import React from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {withRouter, RouteComponentProps} from \"react-router-dom\";\nimport {compose} from \"redux\";\nimport {AppStateType} from '../../redux/redux-store';\nimport {ProfileType} from '../../types/types';\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n    getUserProfile: (userId: number) => void\n    getStatus: (userId: number) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\n\nclass ProfileContainer extends React.Component<PropsType> {\n   \n\n    refreshProfile() {\n        let userId: number | null = +this.props.match.params.userId;\n        if (!userId) {\n            userId = this.props.authorizedUserId;\n            if (!userId) {\n                // todo: may be replace push with Redirect??\n                this.props.history.push(\"/login\");\n            }\n        }\n\n        if (!userId) {\n            console.error(\"ID should exists in URI params or in state ('authorizedUserId')\");\n        } else {\n            this.props.getUserProfile(userId)\n            this.props.getStatus(userId)\n        }\n    }\n\n    componentDidMount() {\n        this.refreshProfile();\n    }\n\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\n            this.refreshProfile();\n        }\n    }\n\n    componentWillUnmount(): void {\n    }\n\n    render() {\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}/>\n        )\n    }\n}\n\nlet mapStateToProps = (state: AppStateType) => {\n    //console.log('mapStateToProps PROFILE')\n    return ({\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        authorizedUserId: state.auth.userId,\n        isAuth: state.auth.isAuth\n    })\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\n    withRouter\n)(ProfileContainer);\n\n\n\n\n"],"sourceRoot":""}