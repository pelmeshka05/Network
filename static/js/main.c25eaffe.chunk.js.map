{"version":3,"sources":["utils/validators/validators.ts","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/user.png","api/chat-api.ts","redux/chat-reducer.ts","assets/images/preloader.svg","components/Users/users.module.css","api/api.ts","serviceWorker.js","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/LoginPage.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","concat","Preloader","React","createElement","style","backgroundColor","src","preloader","module","exports","profileAPI","getProfile","userId","instance","get","then","res","data","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","headers","saveProfile","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","async","dispatch","resultCode","error","file","getState","auth","stopSubmit","_error","messages","Promise","reject","Error","profileReducer","state","arguments","undefined","action","newPost","_objectSpread","filter","p","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","subcribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","s","openHandler","errorHandler","console","cleanUp","_ws","_ws2","_ws3","_ws4","removeEventListener","_ws5","close","WebSocket","addEventListener","chatAPI","start","stop","_ws6","subscribe","eventName","callback","push","unsubscribe","_ws7","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","chatReducer","map","m","v1","index","array","axios","create","withCredentials","baseURL","ResultCodesEnum","ResultCodeForCapcthaEnum","Boolean","window","location","hostname","match","authAPI","me","login","email","password","rememberMe","captcha","post","logout","delete","securityAPI","getCaptchaUrl","isAuth","captchaUrl","setAuthUserData","getAuthUserData","meData","Success","url","authReducer","LoginReduxForm","reduxForm","form","_ref","handleSubmit","onSubmit","createField","Input","alt","className","formSummaryError","LoginPage","useSelector","useDispatch","Redirect","to","CaptchaIsRequired","initialized","initializedSuccess","appReducer","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","u","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","formReducer","app","chat","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","props","Suspense","fallback","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","portionCount","portionNumber","setPortionNumber","useState","leftPortionPageNumber","rightPortionPageNumber","cn","styles","paginator","onClick","selectedPage","pageNumber","key","User","user","NavLink","small","userPhoto","disabled","some","usersSearchFormValidate","values","UsersSearchForm","memo","Formik","enableReinitialize","initialValues","String","validate","submit","setSubmitting","onFilterChanged","_ref2","isSubmitting","Form","Field","as","Users","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","UsersPage","Fragment","pageTitle","selectIsAuth","selectCurrentUserLogin","Header","Layout","menuItems","label","Link","Row","Col","span","Menu","theme","mode","defaultSelectedKeys","Avatar","icon","UserOutlined","Button","logoutCallback","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","App","Component","constructor","catchAllUnhandledErrors","alert","componentDidMount","this","initializeApp","componentWillUnmount","render","children","LaptopOutlined","NotificationOutlined","padding","Breadcrumb","margin","Item","width","height","minHeight","Switch","Route","exact","path","textAlign","AppContainer","withRouter","connect","promise","all","SamuraiJSApp","BrowserRouter","Provider","rootElement","document","getElementById","ReactDOM","createRoot","navigator","serviceWorker","ready","registration","unregister","FormControl","meta","touched","hasError","formControl","Textarea","input","restProps","_objectWithoutProperties","_excluded","Object","assign","_excluded2","placeholder","validators","component","text"],"mappings":"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","file":"static/js/main.c25eaffe.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n    if (value) return undefined;\n\n    return \"Field is required\";\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n","import React from 'react';\nimport preloader from \"../../../assets/images/preloader.svg\";\n\ntype PropsType = {\n}\n\nlet Preloader: React.FC = () => {\n    return <div  style={ { backgroundColor: 'white' } }>\n        <img src={preloader} />\n    </div>\n}\n\nexport default Preloader;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__18P4_\",\"pageNumber\":\"Paginator_pageNumber__xOsKi\",\"selectedPage\":\"Paginator_selectedPage__3SIki\"};","import {PhotosType, ProfileType} from '../types/types';\nimport {instance, APIResponseType} from './api';\n\ntype SavePhotoResponseDataType = {\n    photos: PhotosType\n}\n\nexport const profileAPI = {\n    getProfile(userId: number) {\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\n    },\n    getStatus(userId: number) {\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\n    },\n    updateStatus(status: string) {\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\n    },\n    savePhoto(photoFile: File) {\n        const formData = new FormData();\n        formData.append(\"image\", photoFile);\n\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\n            headers: {\n                'Content-Type': 'multipart/form-data'\n            }\n        }).then(res => res.data);\n    },\n    saveProfile(profile: ProfileType) {\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\n    }\n}\n","import {FormAction, stopSubmit} from \"redux-form\";\nimport {PhotosType, PostType, ProfileType} from '../types/types';\nimport {usersAPI} from '../api/users-api';\nimport {profileAPI} from '../api/profile-api';\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\n\nlet initialState = {\n    posts: [\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\n        {id: 3, message: 'Blabla', likesCount: 11},\n        {id: 4, message: 'Dada', likesCount: 11}\n    ] as Array<PostType>,\n    profile: null as ProfileType | null,\n    status: '',\n}\n\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case 'SN/PROFILE/ADD-POST': {\n            let newPost = {\n                id: 5,\n                message: action.newPostText,\n                likesCount: 0\n            };\n            return {\n                ...state,\n                posts: [...state.posts, newPost],\n            };\n        }\n        case 'SN/PROFILE/SET_STATUS': {\n            return {\n                ...state,\n                status: action.status\n            }\n        }\n        case 'SN/PROFILE/SET_USER_PROFILE': {\n            return {...state, profile: action.profile}\n        }\n\n        case 'SN/PROFILE/DELETE_POST':\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\n\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\n        default:\n            return state;\n    }\n}\n\n\nexport const actions = {\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\n}\n\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\n    const data = await profileAPI.getProfile(userId)\n    dispatch(actions.setUserProfile(data))\n}\n\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\n    let data = await profileAPI.getStatus(userId)\n    dispatch(actions.setStatus(data))\n}\n\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\n    try {\n        let data = await profileAPI.updateStatus(status)\n\n        if (data.resultCode === 0) {\n            dispatch(actions.setStatus(status))\n        }\n    } catch(error) {\n        //\n    }\n}\n\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\n    let data = await profileAPI.savePhoto(file)\n\n    if (data.resultCode === 0) {\n        dispatch(actions.savePhotoSuccess(data.data.photos))\n    }\n}\n\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\n    const userId = getState().auth.userId\n    const data = await profileAPI.saveProfile(profile)\n\n    if (data.resultCode === 0) {\n        if (userId != null) {\n            dispatch(getUserProfile(userId))\n        } else {\n            throw new Error(\"userId can't be null\")\n        }\n    } else {\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\n        return Promise.reject(data.messages[0])\n    }\n}\n\nexport default profileReducer\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","import {InferActionsTypes} from './redux-store';\n\ntype DialogType = {\n    id: number\n    name: string\n}\ntype MessageType = {\n    id: number\n    message: string\n}\n\nlet initialState = {\n    dialogs: [\n        {id: 1, name: 'Dimych'},\n        {id: 2, name: 'Andrew'},\n        {id: 3, name: 'Sveta'},\n        {id: 4, name: 'Sasha'},\n        {id: 5, name: 'Viktor'},\n        {id: 6, name: 'Valera'}\n    ] as Array<DialogType>,\n    messages: [\n        {id: 1, message: 'Hi'},\n        {id: 2, message: 'How is your it-kamasutra?'},\n        {id: 3, message: 'Yo'},\n        {id: 4, message: 'Yo'},\n        {id: 5, message: 'Yo'}\n    ] as Array<MessageType>\n}\n\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/DIALOGS/SEND_MESSAGE':\n            let body = action.newMessageBody;\n            return {\n                ...state,\n                messages: [...state.messages, {id: 6, message: body}]\n            };\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\n}\n\nexport default dialogsReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n","module.exports = __webpack_public_path__ + \"static/media/user.8b1dbb1f.png\";","const subcribers = {\n    'messages-received': [] as MessagesReceivedSubscriberType[],\n    'status-changed': [] as StatusChangedSubscriberType[]\n}\n\nlet ws: WebSocket | null = null\ntype EventsNamesType = 'messages-received' | 'status-changed'\n\nconst closeHandler = () => {\n    notifySubscribersAboutStatus('pending')\n    setTimeout(createChannel, 3000)\n}\nconst messageHandler = (e: MessageEvent) => {\n    const newMessages = JSON.parse(e.data)\n    subcribers['messages-received'].forEach(s => s(newMessages))\n}\nconst openHandler = () => {\n    notifySubscribersAboutStatus('ready')\n}\nconst errorHandler = () => {\n    notifySubscribersAboutStatus('error')\n    console.error('REFRESH PAGE')\n}\nconst cleanUp = () => {\n    ws?.removeEventListener('close', closeHandler)\n    ws?.removeEventListener('message', messageHandler)\n    ws?.removeEventListener('open', openHandler)\n    ws?.removeEventListener('error', errorHandler)\n}\nconst notifySubscribersAboutStatus = (status: StatusType) => {\n    subcribers['status-changed'].forEach(s => s(status))\n}\n\nfunction createChannel() {\n    cleanUp()\n    ws?.close()\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\n    notifySubscribersAboutStatus('pending')\n    ws.addEventListener('close', closeHandler)\n    ws.addEventListener('message', messageHandler)\n    ws.addEventListener('open', openHandler)\n    ws.addEventListener('error', errorHandler)\n}\n\n\nexport const chatAPI = {\n    start() {\n        createChannel()\n    },\n    stop() {\n        subcribers['messages-received'] = []\n        subcribers['status-changed'] = []\n        cleanUp()\n        ws?.close()\n    },\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        // @ts-ignore\n        subcribers[eventName].push(callback)\n        return () => {\n            // @ts-ignore\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\n        }\n    },\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\n        // @ts-ignore\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\n    },\n    sendMessage(message: string) {\n        ws?.send(message)\n    }\n}\n\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\ntype StatusChangedSubscriberType = (status: StatusType) => void\n\nexport type ChatMessageAPIType = {\n    message: string\n    photo: string\n    userId: number\n    userName: string\n}\nexport type StatusType = 'pending' | 'ready' | 'error'\n","import {BaseThunkType, InferActionsTypes} from './redux-store'\nimport {Dispatch} from 'redux'\nimport {FormAction} from 'redux-form/lib/actions'\nimport {chatAPI, ChatMessageAPIType, StatusType} from '../api/chat-api'\nimport {v1} from 'uuid'\n\ntype ChatMessageType = ChatMessageAPIType & {id: string}\n\nlet initialState = {\n    messages: [] as ChatMessageType[],\n    status: 'pending' as StatusType\n}\n\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/chat/MESSAGES_RECEVIED':\n            return {\n                ...state,\n                messages: [...state.messages, ...action.payload.messages.map( m => ({...m, id: v1() }))]\n                    .filter((m, index, array) => index >= array.length - 100)\n            }\n        case 'SN/chat/STATUS_CHANGED':\n            return {\n                ...state,\n                status: action.payload.status\n            }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\n        type: 'SN/chat/MESSAGES_RECEVIED', payload: {messages}\n    } as const),\n    statusChanged: (status: StatusType) => ({\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\n    } as const)\n}\n\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\n    if (_newMessageHandler === null) {\n        _newMessageHandler = (messages) => {\n            dispatch(actions.messagesReceived(messages))\n        }\n    }\n    return _newMessageHandler\n}\n\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\n    if (_statusChangedHandler === null) {\n        _statusChangedHandler = (status) => {\n            dispatch(actions.statusChanged(status))\n        }\n    }\n    return _statusChangedHandler\n}\n\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\n    chatAPI.start()\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\n\n}\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\n    chatAPI.stop()\n}\n\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\n    chatAPI.sendMessage(message)\n}\n\n\nexport default chatReducer\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","module.exports = __webpack_public_path__ + \"static/media/preloader.6c3daf60.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__1_En6\"};","import axios from \"axios\";\nimport {UserType} from '../types/types';\n\nexport const instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\n    headers:     {\n        \"API-KEY\": \"d0ff6c59-ee75-4691-8995-1c1b3288b7b1\"\n    }\n});\n\nexport enum ResultCodesEnum {\n    Success = 0,\n    Error = 1\n}\n\nexport enum ResultCodeForCapcthaEnum {\n    CaptchaIsRequired = 10\n}\n\nexport type GetItemsType = {\n    items: Array<UserType>\n    totalCount: number\n    error: string | null\n}\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\n    data: D\n    messages: Array<string>\n    resultCode: RC\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {instance, APIResponseType, ResultCodeForCapcthaEnum, ResultCodesEnum} from \"./api\";\n\ntype MeResponseDataType = {\n    id: number\n    email: string\n    login: string\n}\ntype LoginResponseDataType = {\n    userId: number\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\n    },\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCapcthaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\n            .then(res => res.data);\n    },\n    logout() {\n        return instance.delete(`auth/login`);\n    }\n}\n","import {instance} from './api';\n\ntype GetCaptchaUrlResponseType = {\n    url: string\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\n    }\n}\n","import {ResultCodeForCapcthaEnum, ResultCodesEnum} from \"../api/api\";\nimport {stopSubmit} from \"redux-form\";\nimport {authAPI} from '../api/auth-api';\nimport {securityAPI} from '../api/security-api';\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\nimport {Action} from 'redux';\nimport {FormAction} from 'redux-form/lib/actions';\n\nlet initialState = {\n    userId: null as (number | null),\n    email: null as string | null,\n    login: null as string | null,\n    isAuth: false,\n    captchaUrl: null as string | null// if null, then captcha is not required\n};\n\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/auth/SET_USER_DATA':\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\n            return {\n                ...state,\n                ...action.payload\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\n    } as const),\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\n    } as const)\n}\n\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\n    let meData = await authAPI.me()\n    if (meData.resultCode === ResultCodesEnum.Success) {\n        let {id, login, email} = meData.data;\n        dispatch(actions.setAuthUserData(id, email, login, true))\n    }\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\n    let data = await authAPI.login(email, password, rememberMe, captcha);\n    if (data.resultCode === ResultCodesEnum.Success) {\n        // success, get auth data\n        dispatch(getAuthUserData())\n    } else {\n        if (data.resultCode === ResultCodeForCapcthaEnum.CaptchaIsRequired) {\n            dispatch(getCaptchaUrl());\n        }\n\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\n        dispatch(stopSubmit(\"login\", {_error: message}));\n    }\n}\n\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\n    const data = await securityAPI.getCaptchaUrl()\n    const captchaUrl = data.url\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\n}\n\nexport const logout = (): ThunkType => async (dispatch: any) => {\n    let response = await authAPI.logout()\n\n    if (response.data.resultCode === 0) {\n        dispatch(actions.setAuthUserData(null, null, null, false))\n    }\n}\n\nexport default authReducer;\n\nexport type InitialStateType = typeof initialState;\ntype ActionsType = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\n","import React from 'react'\nimport {InjectedFormProps, reduxForm} from 'redux-form'\nimport {createField, GetStringKeys, Input} from '../common/FormsControls/FormsControls'\nimport {required} from '../../utils/validators/validators'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {login} from '../../redux/auth-reducer'\nimport {Redirect} from 'react-router-dom'\nimport style from './../common/FormsControls/FormsControls.module.css'\nimport {AppStateType} from '../../redux/redux-store'\n\ntype LoginFormOwnProps = {\n    captchaUrl: string | null\n}\n\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\n    = ({handleSubmit, error, captchaUrl}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\n\n            {captchaUrl && <img src={captchaUrl} alt=\"Company logo\"/>}\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\n\n\n            {error && <div className={style.formSummaryError}>\n                {error}\n            </div>\n            }\n            <div>\n                <button>Login</button>\n            </div>\n        </form>\n    )\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\n\nexport type LoginFormValuesType = {\n    captcha: string\n    rememberMe: boolean\n    password: string\n    email: string\n}\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\n\nexport const LoginPage: React.FC = () => {\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n    const dispatch = useDispatch()\n\n    const onSubmit = (formData: LoginFormValuesType) => {\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\n    }\n\n    if (isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return <div>\n        <h1>Login</h1>\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\n    </div>\n}\n","import {getAuthUserData} from \"./auth-reducer\"\nimport {InferActionsTypes} from './redux-store';\n\nlet initialState = {\n    initialized: false\n};\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsTypes<typeof actions>\n\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'SN/APP/INITIALIZED_SUCCESS':\n            return {\n                ...state,\n                initialized: true\n            }\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\n}\n\nexport const initializeApp = () => (dispatch: any) => {\n    let promise = dispatch(getAuthUserData());\n\n    Promise.all([promise])\n        .then(() => {\n            dispatch(actions.initializedSuccess());\n        });\n}\n\n\nexport default appReducer;\n","let initialState = {}\ntype InitialStateType = typeof initialState\nconst sidebarReducer = (state = initialState, action: any) => {\n    return state;\n}\n\nexport default sidebarReducer;\n","\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\n    return items.map((u: any) => {\n        if (u[objPropName] === itemId) {\n            return {...u, ...newObjProps}\n        }\n        return u;\n    })\n}\n","import {GetItemsType, instance, APIResponseType} from './api';\n\n\nexport const usersAPI = {\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`) )\n            .then(res => res.data)\n    },\n    follow(userId: number) {\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\n    },\n    unfollow(userId: number) {\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\n    }\n}\n","import {updateObjectInArray} from '../utils/object-helpers'\nimport {UserType} from '../types/types'\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\nimport {Dispatch} from 'redux'\nimport {usersAPI} from '../api/users-api'\nimport {APIResponseType} from '../api/api'\n\nlet initialState = {\n    users: [] as Array<UserType>,\n    pageSize: 10,\n    totalUsersCount: 0,\n    currentPage: 1,\n    isFetching: true,\n    followingInProgress: [] as Array<number>, //array of users ids,\n    filter: {\n        term: '',\n        friend: null as null | boolean\n    }\n}\n\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\n    switch (action.type) {\n        case 'SN/USERS/FOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\n            }\n        case 'SN/USERS/UNFOLLOW':\n            return {\n                ...state,\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\n            }\n        case 'SN/USERS/SET_USERS': {\n            return {...state, users: action.users}\n        }\n        case 'SN/USERS/SET_CURRENT_PAGE': {\n            return {...state, currentPage: action.currentPage}\n        }\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\n            return {...state, totalUsersCount: action.count}\n        }\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\n            return {...state, isFetching: action.isFetching}\n        }\n        case 'SN/USERS/SET_FILTER': {\n            return {...state, filter: action.payload}\n        }\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\n            return {\n                ...state,\n                followingInProgress: action.isFetching\n                    ? [...state.followingInProgress, action.userId]\n                    : state.followingInProgress.filter(id => id != action.userId)\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport const actions = {\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\n    setTotalUsersCount: (totalUsersCount: number) => ({\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\n        count: totalUsersCount\n    } as const),\n    toggleIsFetching: (isFetching: boolean) => ({\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\n        isFetching\n    } as const),\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\n        isFetching,\n        userId\n    } as const)\n}\n\nexport const requestUsers = (page: number,\n                             pageSize: number, filter: FilterType): ThunkType => {\n    return async (dispatch, getState) => {\n        dispatch(actions.toggleIsFetching(true))\n        dispatch(actions.setCurrentPage(page))\n        dispatch(actions.setFilter(filter))\n\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\n        dispatch(actions.toggleIsFetching(false))\n        dispatch(actions.setUsers(data.items))\n        dispatch(actions.setTotalUsersCount(data.totalCount))\n    }\n}\n\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\n                                   userId: number,\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\n                                   actionCreator: (userId: number) => ActionsTypes) => {\n    dispatch(actions.toggleFollowingProgress(true, userId))\n    let response = await apiMethod(userId)\n\n    if (response.resultCode == 0) {\n        dispatch(actionCreator(userId))\n    }\n    dispatch(actions.toggleFollowingProgress(false, userId))\n}\n\nexport const follow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\n    }\n}\n\nexport const unfollow = (userId: number): ThunkType => {\n    return async (dispatch) => {\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\n    }\n}\n\nexport default usersReducer\n\nexport type InitialState = typeof initialState\nexport type FilterType = typeof initialState.filter\ntype ActionsTypes = InferActionsTypes<typeof actions>\ntype ThunkType = BaseThunkType<ActionsTypes>\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport profileReducer from \"./profile-reducer\";\nimport dialogsReducer from \"./dialogs-reducer\";\nimport sidebarReducer from \"./sidebar-reducer\";\nimport usersReducer from \"./users-reducer\";\nimport authReducer from \"./auth-reducer\";\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport {reducer as formReducer} from 'redux-form'\nimport appReducer from \"./app-reducer\";\nimport chatReducer from './chat-reducer'\n\nlet rootReducer = combineReducers({\n    profilePage: profileReducer,\n    dialogsPage: dialogsReducer,\n    sidebar: sidebarReducer,\n    usersPage: usersReducer,\n    auth: authReducer,\n    form: formReducer,\n    app: appReducer,\n    chat: chatReducer\n})\n\ntype RootReducerType = typeof rootReducer; // (globalstate: AppStateType) => AppStateType\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\n// @ts-ignore\nwindow.__store__ = store\n\nexport default store\n","import React from \"react\"\n\nexport function withSuspense<WCP extends React.ComponentType<any>>(\n    WrappedComponent: WCP\n) {\n    return (props: React.ComponentProps<WCP>) => {\n        return (\n            <React.Suspense fallback={<div>loading...</div>}>\n                <WrappedComponent {...props} />\n            </React.Suspense>\n        );\n    };\n}\n","import {createSelector} from \"reselect\";\nimport { AppStateType } from \"./redux-store\";\n\nconst getUsersSelector = (state: AppStateType) => {\n    return state.usersPage.users;\n}\n\nexport const getUsers = createSelector(getUsersSelector,\n    (users) => {\n    return users.filter(u => true);\n})\n\nexport const getPageSize = (state: AppStateType) => {\n    return state.usersPage.pageSize;\n}\n\nexport const getTotalUsersCount = (state: AppStateType) => {\n    return state.usersPage.totalUsersCount;\n}\n\nexport const getCurrentPage = (state: AppStateType) => {\n    return state.usersPage.currentPage;\n}\n\nexport const getIsFetching = (state: AppStateType) => {\n    return state.usersPage.isFetching;\n}\n\nexport const getFollowingInProgress = (state: AppStateType) => {\n    return state.usersPage.followingInProgress;\n}\nexport const getUsersFilter = (state: AppStateType) => {\n    return state.usersPage.filter;\n}\n","import React, {useState} from 'react'\nimport styles from './Paginator.module.css'\nimport cn from 'classnames'\n\ntype PropsType = {\n    totalItemsCount: number\n    pageSize: number\n    currentPage?: number\n    onPageChanged?: (pageNumber: number) => void\n    portionSize?: number\n}\n\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize,\n                                      currentPage = 1,\n                                      onPageChanged = x => x,\n                                      portionSize = 10}) => {\n\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\n\n    let pages: Array<number> = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i);\n    }\n\n    let portionCount = Math.ceil(pagesCount / portionSize);\n    let [portionNumber, setPortionNumber] = useState(1);\n\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rightPortionPageNumber = portionNumber * portionSize;\n\n\n    return <div className={cn(styles.paginator)}>\n        { portionNumber > 1 &&\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\n\n            {pages\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\n                .map((p) => {\n                return <span className={ cn({\n                    [styles.selectedPage]: currentPage === p\n                }, styles.pageNumber) }\n                             key={p}\n                             onClick={(e) => {\n                                 onPageChanged(p);\n                             }}>{p}</span>\n            })}\n        { portionCount > portionNumber &&\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\n\n\n    </div>\n}\n\nexport default Paginator;\n","import React from 'react'\nimport styles from './users.module.css'\nimport userPhoto from '../../assets/images/user.png'\nimport {NavLink} from 'react-router-dom'\nimport {UserType} from '../../types/types'\n\ntype PropsType = {\n    user: UserType\n    followingInProgress: Array<number>\n    unfollow: (userId: number) => void\n    follow: (userId: number) => void\n}\n\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\n    return (\n        <div>\n                <span>\n                    <div>\n                       <NavLink to={'/profile/' + user.id}>\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\n                             className={styles.userPhoto}\n                             alt=\"Avatar of userName\"/>\n                           \n                       </NavLink>\n                    </div>\n                    <div>\n                        {user.followed\n                            ? <button disabled={followingInProgress\n                                .some(id => id === user.id)}\n                                      onClick={() => {\n                                          unfollow(user.id)\n                                      }}>\n                                Unfollow</button>\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\n                                      onClick={() => {\n                                          follow(user.id)\n                                      }}>\n                                Follow</button>}\n\n                    </div>\n                </span>\n            <span>\n                    <span>\n                        <div>{user.name}</div>\n                        <div>{user.status}</div>\n                    </span>\n                    <span>\n                        <div>{'user.location.country'}</div>\n                        <div>{'user.location.city'}</div>\n                    </span>\n                </span>\n        </div>)\n}\n\nexport default User\n","import {Field, Form, Formik} from 'formik'\nimport React from 'react'\nimport {FilterType} from '../../redux/users-reducer'\nimport {useSelector} from 'react-redux'\nimport {getUsersFilter} from '../../redux/users-selectors'\n\nconst usersSearchFormValidate = (values: any) => {\n    const errors = {}\n    return errors\n}\n\ntype FriendFormType = 'true' | 'false' | 'null'\n\ntype FormType = {\n    term: string\n    friend: 'true' | 'false' | 'null'\n}\n\ntype PropsType = {\n    onFilterChanged: (filter: FilterType) => void\n}\n\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\n    const filter = useSelector(getUsersFilter)\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\n        const filter: FilterType = {\n            term: values.term,\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\n        }\n\n        props.onFilterChanged(filter)\n        setSubmitting(false)\n    }\n\n    return <div>\n        <Formik\n            enableReinitialize\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\n            validate={usersSearchFormValidate}\n            onSubmit={submit}\n        >\n            {({isSubmitting}) => (\n                <Form>\n                    <Field type=\"text\" name=\"term\"/>\n\n                    <Field name=\"friend\" as=\"select\">\n                        <option value=\"null\">All</option>\n                        <option value=\"true\">Only followed</option>\n                        <option value=\"false\">Only unfollowed</option>\n                    </Field>\n                    <button type=\"submit\" disabled={isSubmitting}>\n                        Find\n                    </button>\n                </Form>\n            )}\n        </Formik>\n    </div>\n})\n","import React, {FC, useEffect} from 'react'\nimport Paginator from '../common/Paginator/Paginator'\nimport User from './User'\nimport {UsersSearchForm} from './UsersSearchForm'\nimport {FilterType, requestUsers} from '../../redux/users-reducer'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {\n    getCurrentPage,\n    getFollowingInProgress,\n    getPageSize,\n    getTotalUsersCount,\n    getUsers,\n    getUsersFilter\n} from '../../redux/users-selectors'\nimport {useHistory} from 'react-router-dom'\nimport * as queryString from 'querystring'\n\ntype PropsType = {}\n\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\nexport const Users: FC<PropsType> = (props) => {\n\n    const users = useSelector(getUsers)\n    const totalUsersCount = useSelector(getTotalUsersCount)\n    const currentPage = useSelector(getCurrentPage)\n    const pageSize = useSelector(getPageSize)\n    const filter = useSelector(getUsersFilter)\n    const followingInProgress = useSelector(getFollowingInProgress)\n\n    const dispatch = useDispatch()\n    const history = useHistory()\n\n    useEffect(() => {\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\n\n        let actualPage = currentPage\n        let actualFilter = filter\n\n        if (!!parsed.page) actualPage = Number(parsed.page)\n\n\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\n\n        switch(parsed.friend) {\n            case \"null\":\n                actualFilter = {...actualFilter, friend: null}\n                break;\n            case \"true\":\n                actualFilter = {...actualFilter, friend: true}\n                break;\n            case \"false\":\n                actualFilter = {...actualFilter, friend: false}\n                break;\n        }\n\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\n    }, [])\n\n    useEffect(() => {\n        const query: QueryParamsType = {}\n\n        if (!!filter.term) query.term = filter.term\n        if (filter.friend !== null) query.friend = String(filter.friend)\n        if (currentPage !== 1) query.page = String(currentPage)\n\n        history.push({\n            pathname: '/developers',\n            search: queryString.stringify(query)\n        })\n    }, [filter, currentPage])\n\n\n    const onPageChanged = (pageNumber: number) => {\n        dispatch(requestUsers(pageNumber, pageSize, filter))\n    }\n    const onFilterChanged = (filter: FilterType) => {\n        dispatch(requestUsers(1, pageSize, filter))\n    }\n    const follow = (userId: number) => {\n        dispatch(follow(userId));\n    }\n    const unfollow = (userId: number) => {\n        dispatch(unfollow(userId));\n    }\n\n    return <div>\n\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\n\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\n        <div>\n            {\n                users.map(u => <User user={u}\n                                     followingInProgress={followingInProgress}\n                                     key={u.id}\n                                     unfollow={unfollow}\n                                     follow={follow}\n                    />\n                )\n            }\n        </div>\n    </div>\n}\n","import React from 'react'\nimport {useSelector} from 'react-redux'\nimport Preloader from '../common/Preloader/Preloader'\nimport {getIsFetching} from '../../redux/users-selectors'\nimport {Users} from './Users'\n\ntype UsersPagePropsType = {\n    pageTitle: string\n}\n\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\n    const isFetching = useSelector(getIsFetching)\n    return <>\n        <h2>{props.pageTitle}</h2>\n        {isFetching ? <Preloader/> : null}\n        <Users />\n    </>\n}\n","import {AppStateType} from './redux-store'\n\nexport const selectIsAuth = (state: AppStateType) => {\n    return state.auth.isAuth\n}\n\nexport const selectCurrentUserLogin = (state: AppStateType) => {\n    return state.auth.login\n}\n\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Avatar, Button, Col, Layout, Menu, Row } from 'antd';\nimport { UserOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCurrentUserLogin, selectIsAuth } from '../../redux/auth-selectors';\nimport { logout } from '../../redux/auth-reducer';\n\nexport type MapPropsType = {};\n\nexport const Header: React.FC<MapPropsType> = (props) => {\n  const isAuth = useSelector(selectIsAuth);\n  const login = useSelector(selectCurrentUserLogin);\n\n  const dispatch = useDispatch();\n\n  const logoutCallback = () => {\n    dispatch(logout());\n  };\n\n  const { Header } = Layout;\n\n  const menuItems = [\n    {\n      key: '1',\n      label: <Link to=\"/developers\">Developers</Link>,\n    },\n  ];\n\n  return (\n    <Header className=\"header\">\n      <Row>\n        <Col span={18}>\n          <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']} items={menuItems} />\n        </Col>\n\n        {isAuth ? (\n          <>\n            <Col span={1}>\n              <Avatar alt={login || ''} style={{ backgroundColor: '#87d068' }} icon={<UserOutlined />} />\n            </Col>\n            <Col span={5}>\n              <Button onClick={logoutCallback}>Log out</Button>\n            </Col>\n          </>\n        ) : (\n          <Col span={6}>\n            <Button>\n              <Link to=\"/login\">Login</Link>\n            </Button>\n          </Col>\n        )}\n      </Row>\n    </Header>\n  );\n};\n\n\n    /*  <header className={s.header}>\n          <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\n\n          <div className={s.loginBlock}>\n              { props.isAuth\n                  ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\n                  : <NavLink to={'/login'}>Login</NavLink> }\n          </div>\n      </header>*/\n\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"antd/dist/antd.css\";\nimport {\n  BrowserRouter,\n  Link,\n  Route,\n  Redirect,\n  withRouter,\n  Switch,\n} from \"react-router-dom\";\nimport { LoginPage } from \"./components/Login/LoginPage\";\nimport { connect, Provider } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { initializeApp } from \"./redux/app-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store, { AppStateType } from \"./redux/redux-store\";\nimport { withSuspense } from \"./hoc/withSuspense\";\nimport { UsersPage } from \"./components/Users/UsersContainer\";\n\nimport { Breadcrumb, Layout, Menu } from \"antd\";\nimport {\n  LaptopOutlined,\n  NotificationOutlined,\n  UserOutlined,\n} from \"@ant-design/icons\";\nimport { Header } from \"./components/Header/Header\";\n\n// interface WithRouterProps {yarn add --dev @types/react-router-dom@5.1.7\n//   navigate: ReturnType<typeof useNavigate>;\n//   location: ReturnType<typeof useLocation>;\n//   params: ReturnType<typeof useParams>;\n// }\n\n// export const withRouter = <P extends object>(Component: React.ComponentType<P>) => {\n//   return (props: P) => {\n//     const navigate = useNavigate();\n//     const location = useLocation();\n//     const params = useParams();\n\n//     return (\n//       <Component\n//         {...props}\n//         navigate={navigate}\n//         location={location}\n//         params={params}\n//       />\n//     );\n//   };\n// };\n\n\nconst { Content, Footer, Sider } = Layout;\n\nconst DialogsContainer = React.lazy(\n  () => import(\"./components/Dialogs/DialogsContainer\")\n);\nconst ProfileContainer = React.lazy(\n  () => import(\"./components/Profile/ProfileContainer\")\n);\nconst ChatPage = React.lazy(() => import(\"./pages/Chat/ChatPage\"));\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>;\ntype DispatchPropsType = {\n  initializeApp: () => void;\n};\n\nconst SuspendedDialogs = withSuspense(DialogsContainer);\nconst SuspendedProfile = withSuspense(ProfileContainer);\nconst SuspendedChatPage = withSuspense(ChatPage);\n\nclass App extends Component<MapPropsType & DispatchPropsType> {\n  catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n    alert(\"Some error occured\");\n  };\n\n  componentDidMount() {\n    this.props.initializeApp();\n    window.addEventListener(\"unhandledrejection\", this.catchAllUnhandledErrors);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"unhandledrejection\",\n      this.catchAllUnhandledErrors\n    );\n  }\n\n  render() {\n    if (!this.props.initialized) {\n      return <Preloader />;\n    }\n\n    const menuItems = [\n        {\n          key: \"sub1\",\n          icon: <UserOutlined />,\n          label: \"My Profile\",\n          children: [\n            { key: \"1\", label: <Link to=\"/profile\">Profile</Link> },\n            { key: \"2\", label: <Link to=\"/dialogs\">Messages</Link> },\n            { key: \"3\", label: \"Option 3\" },\n            { key: \"4\", label: \"Option 4\" },\n          ],\n        },\n        {\n          key: \"sub2\",\n          icon: <LaptopOutlined />,\n          label: \"Developers\",\n          children: [\n            { key: \"5\", label: <Link to=\"/developers\">Developers</Link> },\n            { key: \"6\", label: \"Option 6\" },\n            { key: \"7\", label: \"Option 7\" },\n            { key: \"8\", label: \"Option 8\" },\n          ],\n        },\n        {\n          key: \"sub3\",\n          icon: <NotificationOutlined />,\n          label: \"Subnav 3\",\n          children: [\n            { key: \"9\", label: <Link to=\"/chat\">Chat</Link> },\n            { key: \"10\", label: \"Option 10\" },\n            { key: \"11\", label: \"Option 11\" },\n            { key: \"12\", label: \"Option 12\" },\n          ],\n        },\n      ];\n    return (\n      <Layout>\n        <Header />\n        <Content style={{ padding: \"0 50px\" }}>\n          <Breadcrumb style={{ margin: \"16px 0\" }}>\n            <Breadcrumb.Item>Home</Breadcrumb.Item>\n            <Breadcrumb.Item>List</Breadcrumb.Item>\n            <Breadcrumb.Item>App</Breadcrumb.Item>\n          </Breadcrumb>\n          <Layout\n            className=\"site-layout-background\"\n            style={{ padding: \"24px 0\" }}\n          >\n            <Sider className=\"site-layout-background\" width={200}>\n              <Menu\n                mode=\"inline\"\n                style={{ height: \"100%\" }}\n                items={menuItems}\n              />\n            </Sider>\n            <Content style={{ padding: \"0 24px\", minHeight: 280 }}>\n              <Switch>\n                <Route\n                  exact\n                  path=\"/\"\n                  render={() => <Redirect to=\"/profile\" />}\n                />\n\n                <Route path=\"/dialogs\" render={() => <SuspendedDialogs />} />\n\n                <Route\n                  path=\"/profile/:userId?\"\n                  render={() => <SuspendedProfile />}\n                />\n\n                <Route\n                  path=\"/developers\"\n                  render={() => <UsersPage pageTitle=\"Самураи\" />}\n                />\n\n                <Route path=\"/login\" render={() => <LoginPage />} />\n\n                <Route path=\"/chat\" render={() => <SuspendedChatPage />} />\n\n                <Route path=\"*\" render={() => <div>404 NOT FOUND</div>} />\n              </Switch>\n            </Content>\n          </Layout>\n        </Content>\n        <Footer style={{ textAlign: \"center\" }}>\n          Samurai Social Network ©2020 Created by IT-KAMASUTRA\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  initialized: state.app.initialized,\n});\n\nlet AppContainer = compose<React.ComponentType>(\n  withRouter,\n  connect(mapStateToProps, { initializeApp })\n)(App);\n\nconst SamuraiJSApp: React.FC = () => {\n  return (\n    <BrowserRouter>\n      <Provider store={store}>\n        <AppContainer />\n      </Provider>\n    </BrowserRouter>\n  );\n};\n\nexport default SamuraiJSApp;\n","import * as serviceWorker from './serviceWorker';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport SamuraiJSApp from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nconst root = ReactDOM.createRoot(rootElement!);\nroot.render(<SamuraiJSApp />);\n\n\n\n// API\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\"\nimport styles from \"./FormsControls.module.css\"\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\nimport {Field, WrappedFieldProps} from \"redux-form\"\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\nimport {LoginFormValuesType} from '../../Login/LoginPage';\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n    children?: React.ReactNode\n}\n\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n    const hasError = touched && error;\n    return (\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\n}\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    //const {input, meta, child, ...restProps} = props;\n    const {input, meta, ...restProps} = props;\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                            name: FormKeysType,\n                            validators: Array<FieldValidatorType>,\n                            component: React.FC<WrappedFieldProps>,\n                            props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3oI2W\",\"error\":\"FormsControls_error__9lcue\",\"formSummaryError\":\"FormsControls_formSummaryError__1F2-S\"};"],"sourceRoot":""}