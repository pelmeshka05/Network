{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","React","createElement","className","s","dialog","active","NavLink","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","AddMessageForm","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","_objectSpread","actions","WrappedComponent","restProps","_objectWithoutProperties","_excluded","Redirect"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sGCiBnKC,MAR0BC,IACrC,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAOC,IAAAC,cAAA,OAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACtCL,IAAAC,cAACK,IAAO,CAACC,GAAIT,GAAOD,EAAMW,QCJnBC,MAJuBZ,GAC3BG,IAAAC,cAAA,OAAKC,UAAWC,IAAEC,QAASP,EAAMa,S,0BCA5C,MAAMC,EAAcC,YAAiB,IAmBtBC,kBAAoC,CAACC,KAAM,2BAA3CD,CAbRhB,GAECG,IAAAC,cAAA,QAAMc,SAAUlB,EAAMmB,cAClBhB,IAAAC,cAAA,WACKgB,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUP,GAAcQ,MAEhHnB,IAAAC,cAAA,WACID,IAAAC,cAAA,cAAQ,WCoBTmB,MAvBuBvB,IAClC,IAAIwB,EAAQxB,EAAMyB,YAEdC,EAAkBF,EAAMG,QAAQC,IAAKC,GAAK1B,IAAAC,cAACL,EAAU,CAACY,KAAMkB,EAAElB,KAAMmB,IAAKD,EAAE3B,GAAIA,GAAI2B,EAAE3B,MACrF6B,EAAmBP,EAAMQ,SAASJ,IAAKK,GAAK9B,IAAAC,cAACQ,EAAO,CAACC,QAASoB,EAAEpB,QAASiB,IAAKG,EAAE/B,MAMpF,OACIC,IAAAC,cAAA,OAAKC,UAAWC,IAAEqB,SACdxB,IAAAC,cAAA,OAAKC,UAAWC,IAAE4B,cACZR,GAENvB,IAAAC,cAAA,OAAKC,UAAWC,IAAE0B,UACd7B,IAAAC,cAAA,WAAO2B,IAEX5B,IAAAC,cAAC+B,EAAc,CAACjB,SAZHkB,IACjBpC,EAAMqC,YAAYD,EAAOE,qB,4CCgBjC,IAAIC,EAA8Bf,IAAmB,CACjDgB,OAAQhB,EAAMiB,KAAKD,S,YC3BRE,sBACXC,YAPmBnB,IACZ,CACHC,YAAaD,EAAMC,cAKAmB,YAAA,GAAMC,ODK1B,SAAqEC,GAgBxE,OALuCH,YACnCJ,EACA,GAFmCI,CAVgC3C,IACnE,MAAM,OAAEwC,GAAyBxC,EAAd+C,EAASC,YAAKhD,EAAKiD,GAGtC,OAAKT,EAGErC,IAAAC,cAAC0C,EAAqBC,GAHT5C,IAAAC,cAAC8C,IAAQ,CAACxC,GAAG,eCX1BgC,CAGbnB","file":"static/js/4.72591b90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from 'react';\nimport s from './../Dialogs.module.css';\nimport {NavLink} from \"react-router-dom\";\n\n\ntype PropsType = {\n    id: number\n    name: string\n}\n\nconst DialogItem: React.FC<PropsType> = (props) => {\n    let path = \"/dialogs/\" + props.id;\n\n    return <div className={s.dialog + ' ' + s.active}>\n        <NavLink to={path}>{props.name}</NavLink>\n    </div>\n}\n\nexport default DialogItem;\n","import React from 'react';\nimport s from './../Dialogs.module.css';\n\ntype PropsType = {\n    message: string\n}\nconst Message: React.FC<PropsType> = (props) => {\n    return <div className={s.dialog}>{props.message}</div>\n}\n\nexport default Message;\n","import React from 'react';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input, Textarea} from '../../common/FormsControls/FormsControls';\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\nimport {NewMessageFormValuesType} from '../Dialogs';\nimport {LoginFormValuesType} from '../../Login/LoginPage';\n\nconst maxLength50 = maxLengthCreator(50);\n\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\ntype PropsType = {}\n\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\n    = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", 'newMessageBody', [required, maxLength50], Textarea)}\n            </div>\n            <div>\n                <button>Send</button>\n            </div>\n        </form>\n    )\n}\n\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport s from './Dialogs.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {Redirect} from \"react-router-dom\";\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\nimport {InitialStateType} from '../../redux/dialogs-reducer';\n\ntype PropsType = {\n    dialogsPage: InitialStateType\n    sendMessage: (messageText: string) => void\n}\n\nexport type NewMessageFormValuesType = {\n    newMessageBody: string\n}\n\nconst Dialogs: React.FC<PropsType> = (props) => {\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\n\n    let addNewMessage = (values: NewMessageFormValuesType) => {\n        props.sendMessage(values.newMessageBody);\n    }\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogsItems}>\n                { dialogsElements }\n            </div>\n            <div className={s.messages}>\n                <div>{ messagesElements }</div>\n            </div>\n            <AddMessageForm onSubmit={addNewMessage} />\n        </div>\n    )\n}\n\nexport default Dialogs;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { AppStateType } from '../redux/redux-store';\n\n// Типы для пропсов, которые будут приходить из state\ntype MapPropsType = {\n    isAuth: boolean;\n}\n\ntype DispatchPropsType = {\n    // Здесь можно добавить типы для пропсов, которые будут приходить через dispatch, если они есть\n}\n\n// Тип для пропсов компонента, передаваемого в HOC\ntype WrappedComponentProps = {\n    // Здесь указываем все пропсы, которые должен принимать WrappedComponent\n}\n\n// Указываем тип пропсов для компонента, обернутого в HOC\nexport function withAuthRedirect<WCP extends React.JSX.IntrinsicAttributes>(WrappedComponent: React.ComponentType<WCP>) {\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\n        const { isAuth, ...restProps } = props;\n\n        // Если нет авторизации, редиректим на страницу логина\n        if (!isAuth) return <Redirect to=\"/login\" />;\n\n        // Передаем оставшиеся пропсы в WrappedComponent\n        return <WrappedComponent {...restProps as WCP} />;\n    };\n\n    const ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\n        mapStateToPropsForRedirect,\n        {} // Можно добавить actions, если они нужны\n    )(RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n}\n\n// Функция для получения состояния из Redux\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\n    isAuth: state.auth.isAuth\n});\n","import React from 'react';\nimport {actions} from '../../redux/dialogs-reducer';\nimport Dialogs from './Dialogs';\nimport {connect} from 'react-redux';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\nimport {compose} from 'redux';\nimport {AppStateType} from '../../redux/redux-store';\n\nlet mapStateToProps = (state: AppStateType) => {\n    return {\n        dialogsPage: state.dialogsPage\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, {...actions}),\n    withAuthRedirect\n)(Dialogs)\n"],"sourceRoot":""}