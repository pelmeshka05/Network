{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","React","createElement","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","isAutoScroll","setIsAutoScroll","useState","_messagesAnchorRef$cu","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","key","id","message","ref","memo","_ref","src","photo","alt","userName","width","setMessage","onChange","value","disabled","onClick","sendMessageHandler","sendMessage","ChatPage"],"mappings":"oIAAA,4CAOA,MAMMA,EAAiBA,KACnB,MAAMC,EAAWC,cACXC,EAASC,YAAaC,GAAwBA,EAAMC,KAAKH,QAS/D,OAPAI,oBAAU,KACNN,EAASO,eACF,KACHP,EAASQ,iBAEd,CAACR,IAEGS,IAAAC,cAAA,WACS,UAAXR,GAAsBO,IAAAC,cAAA,WAAK,gDAC5BD,IAAAC,cAACC,EAAQ,MACTF,IAAAC,cAACE,EAAc,QAIjBD,EAAqBA,KACvB,MAAME,EAAWV,YAAaC,GAAwBA,EAAMC,KAAKQ,UAC3DC,EAAoBC,iBAAuB,OAC1CC,EAAcC,GAAmBC,oBAAS,GAqBjD,OANAZ,oBAAU,KACa,IAADa,EAAdH,IACyB,QAAzBG,EAAAL,EAAkBM,eAAO,IAAAD,GAAzBA,EAA2BE,eAAe,CAAEC,SAAU,aAE3D,CAACT,EAAUG,IAEPP,IAAAC,cAAA,OAAKa,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SAnBpCC,IACnB,MAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,IACzElB,GACDC,GAAgB,GAGhBD,GACAC,GAAgB,KAYvBJ,EAASsB,IAAKC,GAAM3B,IAAAC,cAAC2B,EAAO,CAACC,IAAKF,EAAEG,GAAIC,QAASJ,KAClD3B,IAAAC,cAAA,OAAK+B,IAAK3B,MAIZuB,EAAqD5B,IAAMiC,KAAKC,IAAkB,IAAjB,QAAEH,GAASG,EAC9E,OAAOlC,IAAAC,cAAA,WACHD,IAAAC,cAAA,OAAKkC,IAAKJ,EAAQK,MAAOC,IAAKN,EAAQO,SAAUxB,MAAO,CAAEyB,MAAO,UAAY,IAACvC,IAAAC,cAAA,SAAI8B,EAAQO,UACzFtC,IAAAC,cAAA,WACC8B,EAAQA,QACT/B,IAAAC,cAAA,cAIFE,EAA2BA,KAC7B,MAAO4B,EAASS,GAAc/B,mBAAS,IACjClB,EAAWC,cACXC,EAASC,YAAaC,GAAwBA,EAAMC,KAAKH,QAU/D,OAAOO,IAAAC,cAAA,WACHD,IAAAC,cAAA,WACID,IAAAC,cAAA,YAAUwC,SAAWvB,GAAMsB,EAAWtB,EAAEE,cAAcsB,OAAQA,MAAOX,KAEzE/B,IAAAC,cAAA,WACID,IAAAC,cAAA,UAAQ0C,SAAqB,UAAXlD,EAAoBmD,QAbnBC,KAClBd,IAGLxC,EAASuD,YAAYf,IACrBS,EAAW,OAQ4D,WAKhEO,UAtFYA,IAChB/C,IAAAC,cAAA,WACHD,IAAAC,cAACX,EAAI","file":"static/js/5.94000140.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { ChatMessageAPIType } from '../../api/chat-api'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/chat-reducer'\nimport { AppStateType } from '../../redux/redux-store'\n\n\nconst ChatPage: React.FC = () => {\n    return <div>\n        <Chat />\n    </div>\n}\n\nconst Chat: React.FC = () => {\n    const dispatch = useDispatch()\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [dispatch])\n\n    return <div>\n        {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\n        <Messages />\n        <AddMessageForm />\n    </div>\n}\n\nconst Messages: React.FC = () => {\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        const element = e.currentTarget\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\n            if (!isAutoScroll) {\n                setIsAutoScroll(true)\n            }\n        } else {\n            if (isAutoScroll) {\n                setIsAutoScroll(false)\n            }\n        }\n    }\n\n    useEffect(() => {\n        if (isAutoScroll) {\n            messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\n        }\n    }, [messages, isAutoScroll]) // Добавили isAutoScroll в зависимости\n\n    return <div style={{ height: '400px', overflowY: 'auto' }} onScroll={scrollHandler}>\n        {messages.map((m) => <Message key={m.id} message={m} />)}\n        <div ref={messagesAnchorRef}></div>\n    </div>\n}\n\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\n    return <div>\n        <img src={message.photo} alt={message.userName} style={{ width: '30px' }} /> <b>{message.userName}</b>\n        <br />\n        {message.message}\n        <hr />\n    </div>\n})\n\nconst AddMessageForm: React.FC = () => {\n    const [message, setMessage] = useState('')\n    const dispatch = useDispatch()\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n    const sendMessageHandler = () => {\n        if (!message) {\n            return\n        }\n        dispatch(sendMessage(message))\n        setMessage('')\n    }\n\n    return <div>\n        <div>\n            <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message} />\n        </div>\n        <div>\n            <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\n        </div>\n    </div>\n}\n\nexport default ChatPage\n"],"sourceRoot":""}